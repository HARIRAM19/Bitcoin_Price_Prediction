# -*- coding: utf-8 -*-
"""Bitcoin(BTC) Price Prediction - RBE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGwjNYVG7nCXCva3TBgSEcv84TVUxntc

# **BTC PRICE PREDICTION**

## Multiple Linear Regression

Import the Required Libraries.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib as jl
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""*Note: First, Upload the Dataset in the Google Drive and Run the Program.*

Reading the Dataset
"""

dataset = pd.read_csv("/content/drive/MyDrive/Bitcoin Historical Dataset.csv")

"""First Five Recors of the Dataset"""

dataset.head()

"""Last Five Records of the Dataset"""

dataset.tail()

"""Dataset Shape"""

dataset.shape

"""Dataset Describing"""

dataset.describe()

"""Dropping Unnecessary Columns"""

dataset = dataset.drop(['Date','Change %'],axis=1)

"""First Five Records of the Dataset"""

dataset.head()

"""Last Five Records of the Dataset"""

dataset.tail()

"""Dataset Shape"""

dataset.shape

"""Dataset Describing"""

dataset.describe()

X=dataset[['Open','Low','High']]
Y=dataset['Price']

"""Splitting the Dataset into Traing and Testing Set"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

"""Model Fitting"""

bppmlr = LinearRegression()
bppmlr.fit(X_train,Y_train)

"""Intercepts and Coefficients"""

print("Intercept: ", bppmlr.intercept_)
print("Coefficients:")
list(zip(X, bppmlr.coef_))

pred_bppmlr = bppmlr.predict(X_test)
mlr_diff = pd.DataFrame({'Actual value': Y_test, 'Predicted value': pred_bppmlr})
mlr_diff.head()

"""Metrices Calculation"""

meanAbErr = metrics.mean_absolute_error(Y_test, pred_bppmlr)
meanSqErr = metrics.mean_squared_error(Y_test, pred_bppmlr)
rootMeanSqErr = np.sqrt(metrics.mean_squared_error(Y_test, pred_bppmlr))
print('R squared: {:.2f}'.format(bppmlr.score(X,Y)*100))
print('Mean Absolute Error:', meanAbErr)
print('Mean Square Error:', meanSqErr)
print('Root Mean Square Error:', rootMeanSqErr)
print("Training Model Accuracy: {:.3f}%".format(bppmlr.score(X_train,Y_train)*100))

"""Model Accuracy"""

print("Testing Model Accuracy: {:.3f}%".format(bppmlr.score(X_test,Y_test)*100))

"""Plotting **'Open'** vs **'Price'**"""

x = dataset[['Open']]
y = dataset['Price']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 100)
open=LinearRegression()
open.fit(x_train,y_train)
open.score(x_train,y_train)
predict=open.predict(x_test)
plt.scatter(x_test,y_test,color="green")
plt.title("Open vs Price")
plt.plot(x_test,predict,color="red",linewidth=2)

"""Plotting **'Low'** vs **'Price'**"""

x = dataset[['Low']]
y = dataset['Price']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 100)
low=LinearRegression()
low.fit(x_train,y_train)
low.score(x_train,y_train)
predict=low.predict(x_test)
plt.title("Low vs Price")
plt.scatter(x_test,y_test,color="orange")
plt.plot(x_test,predict,color="green",linewidth=2)

"""Plotting **'High'** vs **'Price'**"""

x = dataset[['High']]
y = dataset['Price']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 100)
high=LinearRegression()
high.fit(x_train,y_train)
high.score(x_train,y_train)
predict=high.predict(x_test)
plt.title("High vs Price")
plt.scatter(x_test,y_test,color="yellow")
plt.plot(x_test,predict,color="black",linewidth=2)

"""Model Prediction"""

n=int(input("Number of Inputs:"))
x_new=[]
for i in range(n):
  a=float(input("Enter the Open Price:"))
  b=float(input("Enter the Low Price:"))
  c=float(input("Enter the High Price:"))
  x_new.append([a,b,c])
y_new=bppmlr.predict(x_new)
print("Prediction of the Closing Price:",y_new)

"""Model Saving"""

jl.dump(bppmlr,'Linear_Regression_BTC_Predictor.pkl')

"""## Time Series Forecasting using ARIMA

*Structure*:

*   **Yahoo Finance API**

*   Daily Prices

*   85% Data for Training and 15% Data for Testing

*   Predicting Next Day's Bitcoin Price

*   **Machine Learning Model: ARIMA**

*ARIMA*:

***Auto Regressive Integrated Moving Average***

* **AR**: Autoregression. A Model that uses the dependent relationship between an observation and some number of lagged Observations.

* **I**: Integrated. A use of differencing of raw observations in order to make the time series stationary

* **MA**: Moving Average. A Model that uses the dependancy between an observation and a residual error from a moving average model applied to lagged Observations.

***Parameters***:

* **p**: The Number of Lag Observations included in the Model, also called as Lag Order 

* **d**: The Number of times that the raw observations differenced, also called the Degree of Differencing

* **q**: The Size of the Moving Average Window, also called the Oreder of Moving Average

Importing the Required Libraries
"""

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

"""Downloading the Bitcoin Historical Data from Yahoo Finance"""

data = yf.download('BTC-USD', start = '2015-01-01', end = '2023-04-01')

"""First Five Records in the Dataset"""

data.head()

"""Last Five Records in the Dataset"""

data.tail()

"""Dataset Shape"""

data.shape

"""Plotting the **'Adjusted Close'** vs **'Years'**"""

plt.plot(data.index, data['Adj Close'])
plt.show()

"""Splitting the Dataset into Training and Testing"""

to_row = int(len(data) * 0.85)
print(to_row)

training_data = list(data[0:to_row]['Adj Close'])
testing_data = list(data[to_row:]['Adj Close'])
print(training_data)
print(testing_data)

"""Plotting the Splitted Dataset"""

plt.figure(figsize = (10, 6))
plt.grid(True)
plt.xlabel('Dates')
plt.ylabel('Closing Prices')
plt.plot(data[0:to_row]['Adj Close'], 'Blue', label = 'Training Data')
plt.plot(data[to_row:]['Adj Close'], 'Red', label = 'Testing Data')
plt.legend()
plt.show()

model_predictions = []
n_test_obser = len(testing_data)

"""Model Fitting"""

for i in range(n_test_obser):
    model = ARIMA(training_data, order = (4, 1, 0))
    model_fit = model.fit()
    output = model_fit.forecast()
    yhat = list(output)[0]
    model_predictions.append(yhat)
    actual_test_value = testing_data[i]
    training_data.append(actual_test_value)

"""Model Summary"""

print(model_fit.summary())

"""Plotting the Predicted and Actual BTC Price"""

plt.figure(figsize = (15, 9))
plt.grid()
date_range = data[to_row:].index
plt.plot(date_range, model_predictions, color = 'Blue', marker = 'o', linestyle = 'dashed', label = 'Bitcoin Predicted Price')
plt.plot(date_range, testing_data, color = 'Red', label = 'Bitcoin Actual Price')
plt.title('Bitcoin(BTC) Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

"""Model Accuracy using MAPE"""

mape = np.mean(np.abs(np.array(model_predictions) - np.array(testing_data)) / np.abs(testing_data))
print(f"Mean Absolute Percentage Error(MAPE): {mape}")
print(f"MAPE(%): {mape*100}",)

"""***If the Model's MAPE Percentage is less than 10% the its a Highly Accurate or Excellent Model for Prediction. Its MAPE Value is 2.84%, so it is an Excellent Model for Prediction. Its Accuracy will be greater than or equal to 97.7%***

Model Saving
"""

jl.dump(model_fit,'ARIMA_BTC_Predictor.pkl')